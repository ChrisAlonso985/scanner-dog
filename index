<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dog Scanner Pro üê∂</title>
    <style>
        :root {
            --primary: #4CAF50;
            --secondary: #2196F3;
            --error: #f44336;
            --background: #f5f5f5;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: var(--background);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
        }

        .container {
            max-width: 800px;
            width: 100%;
            margin: 0 auto;
        }

        h1 {
            text-align: center;
            color: var(--primary);
            margin: 20px 0;
            font-size: 2.5em;
        }

        .camera-section {
            background: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            margin: 20px 0;
        }

        #camera {
            width: 100%;
            border-radius: 10px;
            display: none;
            transform: rotateY(180deg);
        }

        .button-group {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin: 20px 0;
            flex-wrap: wrap;
        }

        button {
            background: var(--primary);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s;
            min-width: 160px;
            font-size: 1em;
        }

        button:hover {
            filter: brightness(1.1);
            transform: translateY(-2px);
        }

        button:disabled {
            background: #cccccc;
            cursor: not-allowed;
        }

        .preview-image {
            width: 100%;
            max-width: 400px;
            border-radius: 15px;
            margin: 20px auto;
            display: none;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .result-card {
            background: white;
            padding: 20px;
            border-radius: 15px;
            margin: 20px 0;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            animation: fadeIn 0.5s ease;
        }

        .loader {
            display: none;
            border: 4px solid #f3f3f3;
            border-top: 4px solid var(--primary);
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
        }

        footer {
            text-align: center;
            padding: 20px;
            color: #666;
            margin-top: auto;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .error-message {
            color: var(--error);
            padding: 15px;
            background: #ffeceb;
            border-radius: 8px;
            margin: 15px 0;
            text-align: center;
        }

        @media (max-width: 480px) {
            button {
                width: 100%;
            }
            
            h1 {
                font-size: 1.8em;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Dog Scanner Pro üê∂</h1>
        
        <div class="camera-section">
            <video id="camera" autoplay></video>
            <canvas id="canvas" style="display:none;"></canvas>
            
            <div class="button-group">
                <button id="startCamera">üì∑ Abrir C√°mara</button>
                <button id="captureButton" disabled>üì∏ Tomar Foto</button>
                <button id="uploadButton">üñºÔ∏è Subir Imagen</button>
            </div>
            
            <input type="file" id="uploadInput" accept="image/*" hidden>
            <img id="previewImage" class="preview-image" alt="Imagen capturada">
            <div class="loader" id="loader"></div>
            
            <button id="identifyButton" style="display: none;">üîç Identificar Raza</button>
        </div>

        <div id="result"></div>
    </div>

    <footer>
        <p>Creado por Christian Alonso üêæ | Scanner Canino v2.0</p>
    </footer>

    <script>
        (() => {
            const elements = {
                startCamera: document.getElementById("startCamera"),
                captureButton: document.getElementById("captureButton"),
                uploadButton: document.getElementById("uploadButton"),
                camera: document.getElementById("camera"),
                previewImage: document.getElementById("previewImage"),
                identifyButton: document.getElementById("identifyButton"),
                uploadInput: document.getElementById("uploadInput"),
                result: document.getElementById("result"),
                canvas: document.getElementById("canvas"),
                loader: document.getElementById("loader")
            };

            let mediaStream = null;
            const mockBreeds = [
                { name: "Golden Retriever", confidence: 92, temperament: "Amigable, Inteligente", lifeSpan: "10-12 a√±os", weight: "25-34 kg" },
                { name: "Pastor Alem√°n", confidence: 88, temperament: "Leal, Protector", lifeSpan: "9-13 a√±os", weight: "22-40 kg" },
                { name: "Bulldog Franc√©s", confidence: 85, temperament: "Cari√±oso, Juguet√≥n", lifeSpan: "10-12 a√±os", weight: "8-14 kg" }
            ];

            // Event listeners
            elements.startCamera.addEventListener("click", startCamera);
            elements.captureButton.addEventListener("click", captureImage);
            elements.uploadButton.addEventListener("click", () => elements.uploadInput.click());
            elements.uploadInput.addEventListener("change", handleFileUpload);
            elements.identifyButton.addEventListener("click", identifyBreed);

            async function startCamera() {
                try {
                    mediaStream = await navigator.mediaDevices.getUserMedia({
                        video: { facingMode: "environment" }
                    });
                    elements.camera.srcObject = mediaStream;
                    showElement(elements.camera);
                    elements.captureButton.disabled = false;
                    disableElements([elements.startCamera, elements.uploadButton]);
                } catch (error) {
                    showError("Se necesita permiso para usar la c√°mara");
                }
            }

            function captureImage() {
                elements.canvas.width = elements.camera.videoWidth;
                elements.canvas.height = elements.camera.videoHeight;
                const ctx = elements.canvas.getContext('2d');
                ctx.drawImage(elements.camera, 0, 0);
                
                elements.previewImage.src = elements.canvas.toDataURL();
                showElement(elements.previewImage);
                showElement(elements.identifyButton);
                stopCamera();
            }

            function handleFileUpload(e) {
                const file = e.target.files[0];
                if (file && file.type.startsWith('image/')) {
                    const reader = new FileReader();
                    reader.onload = (event) => {
                        elements.previewImage.src = event.target.result;
                        showElement(elements.previewImage);
                        showElement(elements.identifyButton);
                    };
                    reader.readAsDataURL(file);
                }
            }

            async function identifyBreed() {
                showLoader();
                disableElements([elements.identifyButton]);
                
                // Simular an√°lisis con IA
                setTimeout(() => {
                    const randomBreed = mockBreeds[Math.floor(Math.random() * mockBreeds.length)];
                    displayResult(randomBreed);
                    hideLoader();
                    enableElements([elements.identifyButton]);
                }, 1500);
            }

            function displayResult(breed) {
                elements.result.innerHTML = `
                    <div class="result-card">
                        <h2>${breed.name}</h2>
                        <div class="breed-info">
                            <p>üîç Confianza: ${breed.confidence}%</p>
                            <p>‚ù§Ô∏è Temperamento: ${breed.temperament}</p>
                            <p>‚è≥ Esperanza de vida: ${breed.lifeSpan}</p>
                            <p>‚öñÔ∏è Peso: ${breed.weight}</p>
                        </div>
                    </div>
                `;
            }

            function stopCamera() {
                if (mediaStream) {
                    mediaStream.getTracks().forEach(track => track.stop());
                    hideElement(elements.camera);
                    elements.captureButton.disabled = true;
                    enableElements([elements.startCamera, elements.uploadButton]);
                }
            }

            // Helpers
            function showElement(el) { el.style.display = 'block'; }
            function hideElement(el) { el.style.display = 'none'; }
            function disableElements(els) { els.forEach(el => el.disabled = true); }
            function enableElements(els) { els.forEach(el => el.disabled = false); }
            function showLoader() { elements.loader.style.display = 'block'; }
            function hideLoader() { elements.loader.style.display = 'none'; }
            function showError(msg) {
                elements.result.innerHTML = `<div class="error-message">‚ö†Ô∏è ${msg}</div>`;
            }

        })();
    </script>
</body>
</html>
